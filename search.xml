<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>杀毒软件选择</title>
      <link href="/2019/09/08/choose-antivirus-software/"/>
      <url>/2019/09/08/choose-antivirus-software/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要说明"><a href="#摘要说明" class="headerlink" title="摘要说明"></a>摘要说明</h3><ul><li>Windows 10 自带的 Windows Defender 也具有基本的杀毒能力</li><li>国内杀毒软件可能有广告、行为可能不检点，杀毒能力也欠缺一点</li><li>可以参考有标准、有测评、有数据的对比文章，再进行决策</li><li>国外杀毒软件可能有点水土不服，可能会有个别误报</li><li>本文虽然是给 Windows 10 系统物色软件，这些软件基本都是跨平台适用的</li><li>本文是个人在当前所掌握的信息下做出的个人判断，可能有误，欢迎指正</li></ul><a id="more"></a><h3 id="Windows-Defender"><a href="#Windows-Defender" class="headerlink" title="Windows Defender"></a>Windows Defender</h3><p><a href="https://www.microsoft.com/zh-cn/windows/comprehensive-security" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/windows/comprehensive-security</a><br><img src="WindowsDefender设置.png" alt="WindowsDefender设置.png"></p><h3 id="杀毒软件排行榜-2018"><a href="#杀毒软件排行榜-2018" class="headerlink" title="杀毒软件排行榜-2018"></a>杀毒软件排行榜-2018</h3><p><a href="https://reviewedbypro.com/free-antivirus-2018-bitdefender-antivirus-free-edition-vs-avast-free-antivirus/" target="_blank" rel="noopener">https://reviewedbypro.com/free-antivirus-2018-bitdefender-antivirus-free-edition-vs-avast-free-antivirus/</a><br><img src="杀毒软件排行榜-2018.png" alt="杀毒软件排行榜-2018.png"></p><h3 id="杀毒软件对比-2019"><a href="#杀毒软件对比-2019" class="headerlink" title="杀毒软件对比-2019"></a>杀毒软件对比-2019</h3><p>Windows Defender vs Avast：<a href="https://showbox.fun/windows-defender-vs-avast/" target="_blank" rel="noopener">https://showbox.fun/windows-defender-vs-avast/</a><br>–结论：Avast在功能、系统资源占用等多方面胜出<br>Avast vs Bitdefender：<a href="https://www.proficientblogging.com/bitdefender-vs-avast/" target="_blank" rel="noopener">https://www.proficientblogging.com/bitdefender-vs-avast/</a><br>–结论：不分伯仲，Bitdefender在功能和对系统影响上略胜一筹，Avast更流行</p><h3 id="最终选择"><a href="#最终选择" class="headerlink" title="最终选择"></a>最终选择</h3><p>个人考虑对系统性能的影响，本来选择了 Bitdefender，但是安装包下载不了，<br>最终选择了 Avast，且Avast有中文版<br><img src="Avast杀毒软件功能选项.png" alt="Avast杀毒软件功能选项.png"></p><h3 id="官方下载"><a href="#官方下载" class="headerlink" title="官方下载"></a>官方下载</h3><p>Bitdefender免费版：<a href="https://www.bitdefender.com/solutions/free.html" target="_blank" rel="noopener">https://www.bitdefender.com/solutions/free.html</a><br>Avast免费版：<a href="https://www.avast.com/zh-cn/download-thank-you.php?product=FAV-ONLINE&amp;locale=zh-cn" target="_blank" rel="noopener">h</a><a href="https://www.avast.com/zh-cn/free-antivirus-download" target="_blank" rel="noopener">https://www.avast.com/zh-cn/free-antivirus-download</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杀毒软件 </tag>
            
            <tag> Windows10 </tag>
            
            <tag> WindowsDefender </tag>
            
            <tag> Avast </tag>
            
            <tag> Bitdefender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装配置Ubuntu_14.04_amd64</title>
      <link href="/2014/12/02/install-configure-ubuntu/"/>
      <url>/2014/12/02/install-configure-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>本文的一些设置仅适用于13.04及以后的Ubuntu版本。</p><h3 id="Ubuntu镜像下载"><a href="#Ubuntu镜像下载" class="headerlink" title="Ubuntu镜像下载"></a>Ubuntu镜像下载</h3><p>中科大的源在全国都比较快速和稳定：<br>西电的同学可以在本校或兄弟学校成电的镜像网站下载，都比比中科大更快，但是西电的源没有成电的稳定：<br><a href="http://ubuntu.uestc.edu.cn/ubuntu-release/" target="_blank" rel="noopener">http://ubuntu.uestc.edu.cn/ubuntu-release/</a><br><a href="http://ftp.xdlinux.info/iso/ubuntu/" target="_blank" rel="noopener">http://ftp.xdlinux.info/iso/ubuntu/</a></p><a id="more"></a><p>###<br>参考：<a href="http://blog.chinaunix.net/uid-20940095-id-4216696.html" target="_blank" rel="noopener">硬盘安装ubuntu 14.04 LTS</a>、<a href="http://blog.chinaunix.net/uid-21222282-id-1829061.html" target="_blank" rel="noopener">GRUB启动命令详解</a></p><h3 id="更改启动菜单等待时间"><a href="#更改启动菜单等待时间" class="headerlink" title="更改启动菜单等待时间"></a>更改启动菜单等待时间</h3><ul><li><p>安装vim - vi improved</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install vim</span><br></pre></td></tr></table></figure></li><li><p>修改默认grub配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure></li></ul><p>修改其中的<code>GRUP_TIMEOUT=10</code>，我一般改为‘3’，然后更新grub：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-grub</span><br></pre></td></tr></table></figure></p><p><code>/boot/grub/grub.cfg</code>中的系统选择菜单倒计时会更新，以后每次更新内核，都会自动读取默认的grub设置。</p><h3 id="64位Ubuntu14-04安装32位iNode客户端"><a href="#64位Ubuntu14-04安装32位iNode客户端" class="headerlink" title="64位Ubuntu14.04安装32位iNode客户端"></a>64位Ubuntu14.04安装32位iNode客户端</h3><h4 id="首先安装32位库ia32-libs"><a href="#首先安装32位库ia32-libs" class="headerlink" title="首先安装32位库ia32-libs"></a>首先安装32位库<code>ia32-libs</code></h4><p>新版Ubuntu不再使用这个库了，故首先需要添加旧版系统的软件源，然后安装<code>ia32-libs</code>，之后再删除旧版系统的源。<br>创建<code>install-ia32-libs.sh</code>文件，填入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/apt/sources.list.d</span><br><span class="line">echo &quot;deb http://ubuntu.uestc.edu.cn/ubuntu/ precise main restricted universe multiverse&quot; &gt;ia32-libs-raring.list</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ia32-libs</span><br><span class="line">rm ia32-libs-raring.list</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure></p><p>在终端里输入<code>sudo install-ia32-libs.sh</code>执行脚本。<br>参考：<a href="http://andycoder.me/fix-32bug-under-ubuntu1404/" target="_blank" rel="noopener">如何在ubuntu14.04(64位)编译运行32位程序</a>、<a href="http://zodiacg.net/2011/07/howto_install_32bit_app_in_64bit_ubuntu/" target="_blank" rel="noopener">如何在64位Ubuntu下安装32位应用程序</a></p><h4 id="安装iNode客户端"><a href="#安装iNode客户端" class="headerlink" title="安装iNode客户端"></a>安装iNode客户端</h4><p>将iNodeClient_Linux.tar.gz放到主文件夹里，然后安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tar -zxvf ~/iNodeClient_Linux.tar.gz -C /opt</span><br><span class="line">$ <span class="built_in">cd</span> /opt/iNodeClient</span><br><span class="line">$ sudo ./install.sh</span><br></pre></td></tr></table></figure></p><p>装完后，双击<code>/opt/iNodeClient/iNodeClient</code>即可运行。<br>说明：第三方软件一般安装到<code>/opt</code>(optional)目录，以前通常安装到<code>/usr/local/</code>(unix software repository, local代表本地，区别于用apt-get从网络源中安装的软件)中。<br>注意：必须进入iNode目录执行<code>./install.sh</code>安装，该脚本应该使用了当前工作目录(pwd)。<br>如果提示缺少库，请参考：<a href="http://blog.chinaunix.net/uid-26919525-id-3192877.html" target="_blank" rel="noopener">Ubutu 12.04 LTS 安装iNode 后缺少libjpeg.so.62与libtiff.so.3解决方法</a></p><h3 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h3><p>点击右上角开关机图标，进入“系统设置-&gt;软件和更新-&gt;Ubuntu软件-&gt;下载自”，在下拉列表中选择“其他站点…”，然后就近选择一个中国地区的源。可以通过ping比较一下延时，网易云（mirrors.163.com）和阿里云（mirrors.aliyun.com）在全国都有较好的速度；教育网用户首选本校或附近的源，如果没有，可以选择中科大的源（mirrors.ustc.edu.cn），在所有高校都有较快的访问速度；西电同学首选成电的（ubuntu.uestc.edu.cn）或本校的源（需要自己添加，<strong>不太稳定，有些软件包无法下载</strong>）。</p><h3 id="西电源设置："><a href="#西电源设置：" class="headerlink" title="西电源设置："></a>西电源设置：</h3><p>备份软件源：<code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code>，然后<br>编辑 /etc/apt/sources.list (<code>sudo gedit /etc/apt/sources.list</code>)替换为或者加入如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://ftp.xdlinux.info/ubuntu/ trusty main multiverse restricted universe</span><br><span class="line">deb http://ftp.xdlinux.info/ubuntu/ trusty-backports main multiverse restricted universe</span><br><span class="line">deb http://ftp.xdlinux.info/ubuntu/ trusty-proposed main multiverse restricted universe</span><br><span class="line">deb http://ftp.xdlinux.info/ubuntu/ trusty-security main multiverse restricted universe</span><br><span class="line">deb http://ftp.xdlinux.info/ubuntu/ trusty-updates main multiverse restricted universe</span><br><span class="line">deb-src http://ftp.xdlinux.info/ubuntu/ trusty main multiverse restricted universe</span><br><span class="line">deb-src http://ftp.xdlinux.info/ubuntu/ trusty-backports main multiverse restricted universe</span><br><span class="line">deb-src http://ftp.xdlinux.info/ubuntu/ trusty-proposed main multiverse restricted universe</span><br><span class="line">deb-src http://ftp.xdlinux.info/ubuntu/ trusty-security main multiverse restricted universe</span><br><span class="line">deb-src http://ftp.xdlinux.info/ubuntu/ trusty-updates main multiverse restricted universe</span><br></pre></td></tr></table></figure></p><p>使用 sudo apt-get update 同步本地包数据库。<br>使用 sudo apt-get upgrade 升级所有已安装的软件包。<br>参考：<a href="http://xdlinux.info/wiki/index.php?title=Mirror/ubuntu" target="_blank" rel="noopener">Mirror/ubuntu</a><br>其他软件源：<a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">Ubuntu源列表</a></p><h3 id="安装新立德包管理器"><a href="#安装新立德包管理器" class="headerlink" title="安装新立德包管理器"></a>安装新立德包管理器</h3><p>Ubuntu软件中心运行速度很慢，追求性能的用户可以用以前的新立德代替。<br><code>sudo apt-get install synaptic</code></p><h3 id="在启动栏（Launcher）上添加“显示桌面”图标"><a href="#在启动栏（Launcher）上添加“显示桌面”图标" class="headerlink" title="在启动栏（Launcher）上添加“显示桌面”图标"></a>在启动栏（Launcher）上添加“显示桌面”图标</h3><p>右击“更改桌面背景”，在“外观-&gt;行为”中勾选“添加‘显示桌面’图标到启动器”，此外也可以用快捷键“Ctrl+Win+D”，<strong>Unity桌面系统中长按Win键（Super键）会显示所有键盘快捷键</strong>。<br>参考：<a href="http://askubuntu.com/questions/126540/how-to-add-a-show-desktop-icon-to-the-launcher" target="_blank" rel="noopener">How to add a “Show desktop” icon to the launcher?</a></p><h3 id="双击sh脚本弹出提示框"><a href="#双击sh脚本弹出提示框" class="headerlink" title="双击sh脚本弹出提示框"></a>双击sh脚本弹出提示框</h3><blockquote><p>自从13.04以后，双击sh脚本文件就已经默认是geidt打开了，要想运行，从“nautilus（文件）–&gt;编辑–&gt;首选项–&gt;行为–&gt;可执行文本文件”组中选择“每次都询问”。<br>记得在脚本文件右键“属性”，在“权限-&gt;执行”中勾选“允许作为程序执行文件”。<br>参考：<a href="http://www.cnblogs.com/Findxiaoxun/p/3558994.html" target="_blank" rel="noopener">ubuntu sh脚本双击运行</a></p></blockquote><h3 id="安装桌面"><a href="#安装桌面" class="headerlink" title="安装桌面"></a>安装桌面</h3><p><a href="http://www.linuxmint.com/download.php" target="_blank" rel="noopener">Download Linux Mint 17.1 Rebecca</a><br><a href="http://cinnamon.linuxmint.com/" target="_blank" rel="noopener">http://cinnamon.linuxmint.com/</a><br><a href="http://wiki.mate-desktop.org/download" target="_blank" rel="noopener">http://wiki.mate-desktop.org/download</a></p><h3 id="安装浏览器"><a href="#安装浏览器" class="headerlink" title="安装浏览器"></a>安装浏览器</h3><h4 id="遨游：http-www-maxthon-cn"><a href="#遨游：http-www-maxthon-cn" class="headerlink" title="遨游：http://www.maxthon.cn/"></a>遨游：<a href="http://www.maxthon.cn/" target="_blank" rel="noopener">http://www.maxthon.cn/</a></h4><p>32位：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wget http://dl.maxthon.cn/linux/deb/packages/i386/maxthon-browser-stable_1.0.5.3_i386.deb</span><br><span class="line"># dpkg -i maxthon-browser-stable_1.0.5.3_i386.deb</span><br></pre></td></tr></table></figure></p><p>64位：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget http://dl.maxthon.cn/linux/deb/packages/amd64/maxthon-browser-stable_1.0.5.3_amd64.deb</span></span><br><span class="line"><span class="comment"># dpkg -i maxthon-browser-stable_1.0.5.3_amd64.deb</span></span><br></pre></td></tr></table></figure></p><h3 id="Ubuntu14-04配置开发环境"><a href="#Ubuntu14-04配置开发环境" class="headerlink" title="Ubuntu14.04配置开发环境"></a>Ubuntu14.04配置开发环境</h3><ul><li>完整设置<br>参考：<a href="https://github.com/iamcoach/linux-setup/blob/master/Ubuntu.md" target="_blank" rel="noopener">Ubuntu 14.04 Setup</a></li></ul><p>###<br>为root用户设置密码：<code>sudo passwd root</code><br>在终端进入root用户：<code>su</code></p><p>###<br><a href="http://packages.ubuntu.com/search?keywords=search" target="_blank" rel="noopener">Ubuntu软件包搜索</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Nginx+uWSGI+Django+MySQL服务器</title>
      <link href="/2014/11/28/Nginx-uWSGI-Django-MySQL/"/>
      <url>/2014/11/28/Nginx-uWSGI-Django-MySQL/</url>
      
        <content type="html"><![CDATA[<p>为了将PHP改为Python，使用了Django搭建LNMP服务器，<br>下面命名默认Ubuntu系统，且用root账户登录，关于如何以管理员身份登录，请参考：<a href="http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=8445" target="_blank" rel="noopener">Ubuntu Kylin14.04终于可以使用root登陆了</a>。<br>请注意：在创建mysite工程后，命令运行目录为：/python_workspace/mysite。</p><a id="more"></a><p>## </p><h3 id="安装-python-和-python-dev"><a href="#安装-python-和-python-dev" class="headerlink" title="安装 python 和 python-dev"></a>安装 python 和 python-dev</h3><p>Ubuntu发行版自带python；<br>如果没安装python-dev会遇到”致命错误：Python.h：没有那个文件或目录”错误；<br>为了兼容性，选用Python2.x，<code>python --version</code>查看版本；<br>参考：<a href="http://django-china.cn/topic/101/" target="_blank" rel="noopener">五步教你实现使用Nginx+uWSGI+Django方法部署Django程序(上)</a></p><h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py</span><br><span class="line"># python get-pip.py</span><br></pre></td></tr></table></figure><p>参考：<a href="http://www.jsxubar.info/install-pip.html" target="_blank" rel="noopener">pip安装和使用教程</a></p><h3 id="安装并测试uWSGI"><a href="#安装并测试uWSGI" class="headerlink" title="安装并测试uWSGI"></a>安装并测试uWSGI</h3><ul><li><p>利用pip安装uwsgi：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># export LDFLAGS=&quot;-Xlinker --no-as-needed&quot;</span><br><span class="line"># pip install uwsgi</span><br></pre></td></tr></table></figure></li><li><p>测试uwsgi：<br>在你的机器上写一个test.py并填入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;,&apos;text/html&apos;)])</span><br><span class="line">    return &quot;Hello World&quot;</span><br></pre></td></tr></table></figure></li></ul><p>然后执行shell命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8001 --wsgi-file test.py</span><br></pre></td></tr></table></figure></p><p>访问网页：<code>http://127.0.0.1:8001/</code>，看在网页上是否有Hello World。<br>引用：<a href="http://django-china.cn/topic/101/" target="_blank" rel="noopener">五步教你实现使用Nginx+uWSGI+Django方法部署Django程序(上)</a></p><h3 id="安装并配置Django"><a href="#安装并配置Django" class="headerlink" title="安装并配置Django"></a>安装并配置Django</h3><ul><li>安装Django<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pip install Django</span><br></pre></td></tr></table></figure></li></ul><p>参考：<a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">How to get Django</a>、<a href="http://www.ziqiangxuetang.com/django/django-install.html" target="_blank" rel="noopener">Django 环境搭建</a></p><ul><li>创建项目并测试：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p /python_workspace</span><br><span class="line"># cd /python_workspace</span><br><span class="line"># django-admin.py startproject mysite</span><br><span class="line"># cd mysite</span><br><span class="line"># python manage.py runserver 0.0.0.0:8001</span><br></pre></td></tr></table></figure></li></ul><p>在浏览器里输入<code>localhost:8001</code>或<code>127.0.0.1:8001</code>查看效果。<br>参考：<a href="http://www.jb51.net/article/43404.htm" target="_blank" rel="noopener">使用python搭建Django应用程序步骤及版本冲突问题解决</a>、<a href="http://www.linuxyw.com/353.html" target="_blank" rel="noopener">nginx+uwsgi+django+python环境部署文档</a></p><ul><li>uwsgi调用Django：<br>Django1.4+在创建工程的时候会自动创建wsgi模块，进入工程目录(mysite)，执行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8001 --module mysite.wsgi</span><br></pre></td></tr></table></figure></li></ul><p>在浏览器里输入<code>localhost:8001</code>或<code>127.0.0.1:8001</code>查看是否有Django页面。<br>参考：<a href="https://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html?highlight=django" target="_blank" rel="noopener">Setting up Django and your web server with uWSGI and nginx</a></p><h3 id="安装Nginx并配置："><a href="#安装Nginx并配置：" class="headerlink" title="安装Nginx并配置："></a>安装Nginx并配置：</h3><p>本节主要参考：<a href="https://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html?highlight=django" target="_blank" rel="noopener">Setting up Django and your web server with uWSGI and nginx</a></p><ul><li>安装测试Nginx<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install nginx</span></span><br><span class="line"><span class="comment"># /etc/init.d/nginx start    # start nginx</span></span><br></pre></td></tr></table></figure></li></ul><p>在浏览器里输入<code>localhost:80</code>或<code>127.0.0.1:80</code>查看是否有Nginx页面。</p><ul><li>Nginx调用（连接）uWSGI<br>将uwsgi_params拷贝到Django工程目录中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp /etc/nginx/uwsgi_params ./</span><br></pre></td></tr></table></figure></li></ul><p>在工程目录中创建mysite_nginx.conf文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># mysite_nginx.conf</span><br><span class="line">#</span><br><span class="line"># the upstream component nginx needs to connect to</span><br><span class="line">upstream django &#123;</span><br><span class="line">    server unix:///python_workspace/mysite/mysite.sock; # for a file socket</span><br><span class="line">    #server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</span><br><span class="line">&#125;</span><br><span class="line">#</span><br><span class="line"># configuration of the server</span><br><span class="line">server &#123;</span><br><span class="line">    # the port your site will be served on</span><br><span class="line">    listen      8001;</span><br><span class="line">    # the domain name it will serve for</span><br><span class="line">    server_name 127.0.0.1; # 测试用的是回环地址，应该设为公网IP或域名</span><br><span class="line">    charset     utf-8;</span><br><span class="line"></span><br><span class="line">    # max upload size</span><br><span class="line">    client_max_body_size 75M;   # adjust to taste</span><br><span class="line"></span><br><span class="line">    # Django media</span><br><span class="line">    location /media  &#123;</span><br><span class="line">        alias /python_workspace/mysite/media;  # 媒体文件目录</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /python_workspace/mysite/static; # 静态文件目录</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Finally, send all non-media requests to the Django server.</span><br><span class="line">    location / &#123;</span><br><span class="line">        uwsgi_pass  django;</span><br><span class="line">        include     /python_workspace/mysite/uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Nginx的相应目录中建立软链接，使其能找到该文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ln -s /python_workspace/mysite/mysite_nginx.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></p><p>部署静态文件：在mysite/settings.py最后添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)</span><br></pre></td></tr></table></figure></p><p>运行<code>python manage.py collectstatic</code>将默认的静态拷贝到新目录。<br>重启Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure></p><p>放置<code>media.png</code>到上面设置的media目录，并在浏览器里访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8001/media/media.png</span><br></pre></td></tr></table></figure></p><p>创建uWSGI运行脚本<code>mysite_uwsgi.ini</code>并填入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># mysite_uwsgi.ini file</span><br><span class="line">[uwsgi]</span><br><span class="line">#</span><br><span class="line"># Django-related settings</span><br><span class="line"># the base directory (full path)</span><br><span class="line">chdir           = /python_workspace/mysite</span><br><span class="line"># Django&apos;s wsgi file</span><br><span class="line">module          = mysite.wsgi</span><br><span class="line"># the virtualenv (full path)</span><br><span class="line">#home            = /path/to/virtualenv</span><br><span class="line">#</span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 3 # 开启3个uwsgi工作进程</span><br><span class="line"># the socket (use the full path to be safe</span><br><span class="line">socket          = /python_workspace/mysite/mysite.sock</span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line">chmod-socket    = 666</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br></pre></td></tr></table></figure></p><p>运行脚本启动uWSGI：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># uwsgi --ini mysite_uwsgi.ini</span><br></pre></td></tr></table></figure></p><p>（前提是Nginx要运行着）在浏览器里访问<code>127.0.0.1:8001</code>，应该可以看到Django页面。</p><h3 id="安装配置MySQL"><a href="#安装配置MySQL" class="headerlink" title="安装配置MySQL"></a>安装配置MySQL</h3><ul><li>安装MySQL<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install mysql-server</span><br></pre></td></tr></table></figure></li></ul><p>参考：<a href="http://wiki.ubuntu.org.cn/MySQL%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">MySQL安装指南</a><br>如果打开MySQL出现错误（<strong>仅在出现错误时尝试下面的方法</strong>）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR 2002 (HY000): </span><br><span class="line">Can&apos;t connect to local MySQL server through socket </span><br><span class="line">&apos;/var/run/mysqld/mysqld.sock&apos; (2)</span><br></pre></td></tr></table></figure></p><p>需要将MySQL的socket设置为上面的路径（需要修改三处，该方法不一定有效）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/mysql/my.cn</span><br></pre></td></tr></table></figure></p><p><img src="http://keke-hexo-blog.qiniudn.com/image/Django/MySQL-socket.png" alt><br>参考：<a href="http://stackoverflow.com/questions/11990708/error-cant-connect-to-local-mysql-server-through-socket-var-run-mysqld-mysq" target="_blank" rel="noopener">error: ‘Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)’</a></p><ul><li>选择MySQL DB API Drivers<a href="https://docs.djangoproject.com/en/1.7/ref/databases/#mysql-notes" target="_blank" rel="noopener">^Mysql-notes</a></li><li>，本文使用MySQLdb，即mysql-python模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install python-setuptools</span><br><span class="line"># apt-get install libmysqld-dev</span><br><span class="line"># apt-get install libmysqlclient-dev</span><br><span class="line"># easy_install mysql-python</span><br><span class="line"># apt-get install python-mysqldb</span><br></pre></td></tr></table></figure></li></ul><p>测试下：<br>在python交互式窗口，<code>import MySQLdb</code>（注意：区分大小写）试试，不报错的话，就证明安装好了。<br>参考：<a href="http://www.cnblogs.com/coser/archive/2012/01/11/2319125.html" target="_blank" rel="noopener">ubuntu下mysql-python模块的安装</a></p><ul><li>修改mysite/settings.py，添加MySQL配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Database</span><br><span class="line"># https://docs.djangoproject.com/en/1.7/ref/settings/#databases</span><br><span class="line">#</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        #&apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        #&apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">&apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, # Add &apos;postgresql_psycopg2&apos;, &apos;mysql&apos;, &apos;sqlite3&apos; or &apos;oracle&apos;.</span><br><span class="line">        &apos;NAME&apos;: &apos;mysql&apos;, # 这里的名字一定要设为数据库名字否者会出现Unknown database &apos;xxx&apos;</span><br><span class="line">        # The following settings are not used with sqlite3:</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;123&apos;,# 改为自己设置的密码</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,                      # Empty for localhost through domain sockets or &apos;127.0.0.1&apos; for localhost through TCP.</span><br><span class="line">        &apos;PORT&apos;: &apos;3306&apos;,                      # Set to empty string for default.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意，由于py文件默认用ASCII编码，如果有中文会出错，需要在文件的<strong>第一或第二行</strong>加入编码设置：<code># -*- coding: utf-8 -*-</code>。参考：<a href="http://blog.csdn.net/chenyulancn/article/details/7941588" target="_blank" rel="noopener">Python中文问题 或 SyntaxError: Non-ASCII character ‘\xe8’ in file</a><br>在python交互式窗口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django.db import connection</span><br><span class="line">&gt;&gt;&gt; cursor = connection.cursor()</span><br></pre></td></tr></table></figure></p><p><code>django.db</code>注意区分大小写，不报错的话，就证明安装好了。<br>参考：<a href="http://www.cnblogs.com/wendoudou/p/mysql.html" target="_blank" rel="noopener">python Django 学习笔记（四）—— 使用MySQL数据库</a>、<a href="https://docs.djangoproject.com/en/1.7/ref/settings/#databases" target="_blank" rel="noopener">Django-settings-databases</a>、<a href="http://www.cnblogs.com/mutoulbj/archive/2012/04/08/2437698.html" target="_blank" rel="noopener">ubuntu下Django连接mysql数据库出错及解决</a></p><ul><li>创建app并测试数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># django-admin startapp firstapp # firstapp为新创建的app名称</span><br></pre></td></tr></table></figure></li></ul><p>运行上述命令会在mysite工程目录里创建一个firstapp目录。<br>然后在mystite/settings.py中的<code>INSTALLED_APPS</code>模块的最下面加入<code>firstapp</code>，安装此app：<br><img src="http://keke-hexo-blog.qiniudn.com/image/Django/mysite-settings-install-app.png" alt><br>编辑app的模块文件firstapp/models.py，填入操作数据库的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#vim: set fileencoding=utf-8 :</span><br><span class="line">#</span><br><span class="line">from django.db import models</span><br><span class="line">#</span><br><span class="line"># Create your models here.</span><br><span class="line">#</span><br><span class="line">class Company(models.Model):</span><br><span class="line">    full_name = models.CharField(u&apos;公司全称&apos; ,max_length=30)</span><br><span class="line">    address = models.CharField(u&apos;地址&apos;, max_length=50)</span><br><span class="line">    tel = models.CharField(u&apos;电话&apos;, max_length=15,blank=True)</span><br><span class="line"></span><br><span class="line">    def __unicode__(self):</span><br><span class="line">        return  &apos;%s %s %s&apos; % (self.full_name,self.address,self.tel)</span><br><span class="line">#</span><br><span class="line">class Product(models.Model):</span><br><span class="line">    product_name = models.CharField(u&apos;产品名称&apos;, max_length=30)</span><br><span class="line">    price = models.FloatField(u&apos;价格&apos;)</span><br><span class="line">    stock = models.IntegerField(u&apos;库存&apos;, max_length=5)</span><br><span class="line">    company = models.ForeignKey(Company)</span><br><span class="line">    create_date = models.DateField(u&apos;生产日期&apos;)</span><br><span class="line">#</span><br><span class="line">    def __unicode__(self):</span><br><span class="line">        return self.product_name</span><br><span class="line">    #设置一些与特定模型相关的选项</span><br><span class="line">    class Meta:</span><br><span class="line">        ordering = [&apos;create_date&apos;]</span><br></pre></td></tr></table></figure></p><p>采用 python manage.py validate 检查模型的语法和逻辑是否正确。<br>没有错误则执行 python manage.py syncdb创建数据表。<br>现在你可以看到你的数据库除了生成了products_company，products_product外还创建了其它好几个表，这些是django管理后台所需表暂不管。<br>参考：<a href="http://www.cnblogs.com/wendoudou/p/mysql.html" target="_blank" rel="noopener">python Django 学习笔记（四）—— 使用MySQL数据库</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Nginx </tag>
            
            <tag> MySQL </tag>
            
            <tag> uWSGI </tag>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS配置LNMPA服务器</title>
      <link href="/2014/11/27/configure-aliyun-ECS/"/>
      <url>/2014/11/27/configure-aliyun-ECS/</url>
      
        <content type="html"><![CDATA[<h2 id="购买阿里云ECS-aliyun-Elastic-Compute-Service"><a href="#购买阿里云ECS-aliyun-Elastic-Compute-Service" class="headerlink" title="购买阿里云ECS(aliyun Elastic Compute Service)"></a>购买阿里云ECS(aliyun Elastic Compute Service)</h2><blockquote><p>建议最初可以选择最低配置，因为后续升级也非常容易。参考：<a href="http://ninghao.net/blog/1368" target="_blank" rel="noopener">在阿里云 CentOS 服务器（ECS）上搭建 nginx + mysql + php-fpm 环境</a></p></blockquote><ul><li>操作系统建议选择Linux，资源占用低，网络性能好，不过是纯命令行的，如果不喜欢可以选择Windows；</li><li>建议选择比较流行的且较快的Ubuntu，版本建议选择最新的长期支持版本14.04，如果不习惯也可以选择CentOS；</li><li>一般情况下，Linux系统盘的20G够用了（可用18G），如果网站还要上传图片和音视频则需要购买数据盘；</li></ul><a id="more"></a><h2 id="安装LNMPA"><a href="#安装LNMPA" class="headerlink" title="安装LNMPA"></a>安装LNMPA</h2><blockquote><p>　　<strong>LNMPA是什么?</strong><br>　　也许大家对LAMP、LNMP比较熟悉，LAMP代表Linux下Apache、MySQL、PHP这种网站服务器架构；LNMP代表的是Linux下Nginx、MySQL、PHP这种网站服务器架构。LNMPA代表的是Linux下Nginx、MySQL、PHP、Apache这种网站服务器架构，是结合LAMP与LNMP各自的优点而产生的新的网站服务器架构。<br>　　<strong>我们为什么采用LNMPA这种架构?</strong><br>　　采用Linux、PHP、MySQL的优点我们不必多说。<br>Nginx是一个小巧而高效的Linux下的Web服务器软件，与Apache相比，消耗资源更少，支持的并发连接，更高的效率，反向代理功能效率高、静态文件处理快等。<br>Apache是一款老牌的Web服务器软件，在高并发时对队列的处理比FastCGI更成熟，Apache的mod_php效率比php-cgi更高且更稳定、对伪静态支持好，不需要转换、多用户多站点权限等方面有着更好的效果……<br>　　<strong>LNMPA这种架构有什么优势?</strong><br>　　LNMPA使用Nginx作为前端服务能够更快更及时的静态页面、js、图片等，当客户端请求访问动态页面时由Nginx的反向代理给Apache处理，Apache处理完再交予Nginx返回给客户端。<br>采用LNMPA能够更好的解决LNMP架构中由于PHP-FPM方面产生的502错误，同时能够为提供更安全的多用户多站点环境。</p></blockquote><h3 id="Windows登陆远程主机"><a href="#Windows登陆远程主机" class="headerlink" title="Windows登陆远程主机"></a>Windows登陆远程主机</h3><p>　　下载<a href="http://the.earth.li/~sgtatham/putty/0.63/x86/putty.zip" target="_blank" rel="noopener">Putty</a>解压并运行putty.exe，输入远程主机的公网IP，点击打开，输入账号（Linux为root）和密码登陆即可。</p><h3 id="首先安装LNMP：http-lnmp-org-install-html"><a href="#首先安装LNMP：http-lnmp-org-install-html" class="headerlink" title="首先安装LNMP：http://lnmp.org/install.html"></a>首先安装LNMP：<a href="http://lnmp.org/install.html" target="_blank" rel="noopener">http://lnmp.org/install.html</a></h3><ul><li><p>安装MySQL会询问是否安装InnoDB存储引擎，一般网站不需要，如果是做大数据处理的则需要安装。<br>参考：<a href="http://www.cnblogs.com/villion/archive/2009/07/09/1893762.html" target="_blank" rel="noopener">MySQL: InnoDB 还是 MyISAM?</a>、<a href="http://www.t369.net/news/shownews.asp?id=56" target="_blank" rel="noopener">Default storage engine设置</a></p></li><li><p>安装PHP的版本，推荐 5.3.28，性能有所提升，也是大势所趋：<br>参考：<a href="http://msn.shandian.biz/749.html" target="_blank" rel="noopener">PHP版本的选择5.2.17 5.3.27 5.3.28 5.4 5.5兼容性问题分析</a></p></li><li><p>MySQL版本选择，首次安装建议选择5.5，如果是5.1的没必要升级到5.5：</p><blockquote><p>在低并发情况下，MySQL5.1跟MySQL5.5性能持平，而实际应用中大部分并发数都低于10，因此绝大部分用户没有必要立即更换至5.5版本；<br>在高并发情况下，MySQL5.5的性能优势明显。<br>参考：<br><a href="http://www.mysqlab.net/blog/2011/02/mysql-5-5-vs-mysql-5-1-performance/" target="_blank" rel="noopener">MySQL5.5与MySQL5.1 性能(比较)对比测试—MySQL实验室</a><br><a href="http://blog.chinaunix.net/uid-20639775-id-3169246.html" target="_blank" rel="noopener">MYSQL5.5和MYSQL5.1性能对比</a><br><a href="http://linuxguest.blog.51cto.com/195664/746361/" target="_blank" rel="noopener">MySQL 4.1/5.0/5.1/5.5/5.6各版本的主要区别</a></p></blockquote></li></ul><blockquote><p>LNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin、Zend Optimizer这几个软件。<br>安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响。<br>安装完成后命令行提示：<br><img src="http://keke-hexo-blog.qiniudn.com/image/LNMPA/LNMP1.1安装完成.png" alt><br>在浏览器里输入公网IP可以看到默认页面：<br><img src="http://keke-hexo-blog.qiniudn.com/image/LNMPA/LNMP1.1安装成功后的默认页面.png" alt></p></blockquote><h3 id="然后安装Apache：http-lnmp-org-lnmpa-html"><a href="#然后安装Apache：http-lnmp-org-lnmpa-html" class="headerlink" title="然后安装Apache：http://lnmp.org/lnmpa.html"></a>然后安装Apache：<a href="http://lnmp.org/lnmpa.html" target="_blank" rel="noopener">http://lnmp.org/lnmpa.html</a></h3><blockquote><p><strong>注意：低于1G内存不建议使用LNMPA，升级到LNMPA后无法降回LNMP。</strong></p></blockquote><h3 id="启用-InnoDB（一键LNMP已安装InnoDB，只是没有启用）"><a href="#启用-InnoDB（一键LNMP已安装InnoDB，只是没有启用）" class="headerlink" title="启用 InnoDB（一键LNMP已安装InnoDB，只是没有启用）"></a>启用 InnoDB（一键LNMP已安装InnoDB，只是没有启用）</h3><p><code>/etc/init.d/mysql stop</code><br><code>vim /etc/my.cnf</code><br>将默认引擎改为InnoDB，并注释掉<code>loose-skip-innodb</code>：<br><img src="http://keke-hexo-blog.qiniudn.com/image/LNMPA/启用InnoDB1.png" alt><br><code>/etc/init.d/mysql start</code><br><img src="http://keke-hexo-blog.qiniudn.com/image/LNMPA/InnoDB已经启用.png" alt><br>参考：<a href="http://down.chinaz.com/server/201207/2090_1.htm" target="_blank" rel="noopener">MySql中启用InnoDB数据引擎的方法</a><br>如果没有安装InnoDB需要安装：<br><a href="http://blog.csdn.net/tenfyguo/article/details/7706534" target="_blank" rel="noopener">mysql中如何安装innodb plugin</a>、<a href="http://luoyahu.iteye.com/blog/838450" target="_blank" rel="noopener">mysql 安装innodb支持</a><br>MySQL命令：<a href="http://www.2cto.com/database/201209/154363.html" target="_blank" rel="noopener">MySQL命令行登录</a>、<a href="http://www.2cto.com/database/201209/154378.html" target="_blank" rel="noopener">MySQL数据库命令行工具</a></p><h3 id="LNMP状态管理命令"><a href="#LNMP状态管理命令" class="headerlink" title="LNMP状态管理命令"></a><a href="http://lnmp.org/faq/lnmp-status-manager.html" target="_blank" rel="noopener">LNMP状态管理命令</a></h3><p><em>LNMP状态管理命令：</em></p><p>LNMP状态管理： /root/lnmp {start|stop|reload|restart|kill|status}<br>Nginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}<br>MySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}<br>Memcached状态管理：/etc/init.d/memcached {start|stop|restart}<br>PHP-FPM状态管理：/etc/init.d/php-fpm {start|stop|quit|restart|reload|logrotate}<br>PureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}<br>ProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}</p><p>如重启LNMP，输入命令：/root/lnmp restart 即可，单独重启mysql：/etc/init.d/mysql restart</p><p><em>LNMPA状态管理命令：</em></p><p>LNMPA状态管理： /root/lnmpa {start|stop|reload|restart|kill|status}<br>Nginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}<br>MySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}<br>Memcached状态管理：/etc/init.d/memcached {start|stop|restart}<br>PureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}<br>ProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}<br>Apache状态管理：/etc/init.d/httpd {start|stop|restart|graceful|graceful-stop|configtest|status}</p><h2 id="挂载数据盘"><a href="#挂载数据盘" class="headerlink" title="挂载数据盘"></a>挂载数据盘</h2><p>购买的数据盘默认没有格式化和分区，需要手动操作：<a href="http://help.aliyun.com/view/13435365.html?spm=5176.7114037.1996646101.1.xaWFnH" target="_blank" rel="noopener">Linux 系统挂载数据盘</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Linux内存占用高的原因：<a href="http://www.vpser.net/other/linux-vps-ram.html" target="_blank" rel="noopener">Linux VPS内存占用那么多？- 解析Linux内存机制</a><br><img src="http://keke-hexo-blog.qiniudn.com/image/LNMPA/Linux内存占用.png" alt></p><p>Putty连接异常中断后如何注销其他用户：<a href="http://bbs.chinaunix.net/thread-1955574-1-1.html" target="_blank" rel="noopener">如何注销其他已登录的用户?</a><br><img src="http://keke-hexo-blog.qiniudn.com/image/LNMPA/注销其他用户.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 经验教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> ECS </tag>
            
            <tag> LNMPA </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Nginx </tag>
            
            <tag> MySQL </tag>
            
            <tag> PHP </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo和Gitcafe搭建个人博客</title>
      <link href="/2014/11/01/setup-blog-with-hexo/"/>
      <url>/2014/11/01/setup-blog-with-hexo/</url>
      
        <content type="html"><![CDATA[<p>　　之前找工作，经常逛<a href="http://www.itmian4.com/" target="_blank" rel="noopener">IT面试</a>网站，一次循着一篇文章找到了<a href="http://wuchong.me/" target="_blank" rel="noopener">Jark’s Blog</a>，感觉界面很清爽，访问速度很快，就打算自己也开一个这样的博客。</p><a id="more"></a><h2 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h2><p>　　本博客用<a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>+<a href="https://gitcafe.com/" target="_blank" rel="noopener">Gitcafe</a>搭建，博客内容需要用<a href="http://www.markdown.cn/" target="_blank" rel="noopener">Markdown</a>编写。总体来说有点麻烦，但是具有高度的自由度。</p><p>　　Hexo的由来参见作业的博文：<a href="http://zespia.tw/blog/2012/10/11/hexo-debut/" target="_blank" rel="noopener">Hexo 颯爽登場！</a>。其他介绍：<a href="http://lucifr.com/2013/01/02/from-octopress-to-hexo/" target="_blank" rel="noopener">从 Octopress 到 Hexo</a>、<a href="http://www.cnblogs.com/youxilua/archive/2013/04/04/2999026.html" target="_blank" rel="noopener">Hexo 简明入门教程（一）</a>。</p><p>　　如果不想从博客园转过来，但是喜欢Hexo风格主题的，也可以参考：<a href="http://www.cnblogs.com/moondark/p/3607825.html" target="_blank" rel="noopener">将博客园界面打造成Hexo经典主题Light</a>。Hexo还支持导入其他博客的博文：<a href="http://jingyan.baidu.com/article/5bbb5a1b34bd1d13eaa1797e.html" target="_blank" rel="noopener">从博客园迁移到Hexo</a>、<a href="http://blog.yidongzhifu.net/2014/03/25/%E6%8A%9B%E5%BC%83wordpress%E6%AD%A3%E5%BC%8F%E7%94%A8hexo-%E8%BF%81%E5%BE%99%E4%B9%8B%E8%B7%AF/" target="_blank" rel="noopener">抛弃Wordpress正式用Hexo-迁徙之路</a>。</p><h2 id="购买并设置域名（可选）"><a href="#购买并设置域名（可选）" class="headerlink" title="购买并设置域名（可选）"></a>购买并设置域名（可选）</h2><p>　　专属域名首先比较个性，从长远来看，当网站访问量比较大时，还可以拿来谋点财富。之所以先谈域名购买，是因为域名购买后有一个生效时间。如果不打算购买，可以跳过。</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>　　大家都选国外的<a href="https://www.godaddy.com/" target="_blank" rel="noopener">Godaddy</a>网站（至于原因，自行谷歌去），<a href="http://www.angely.org/godaddy" target="_blank" rel="noopener">点此</a>可以找到优惠码或优惠链接，首选com和me域名，年费60元左右，图文购买教程见：<a href="http://www.admin5.com/article/20131014/527495.shtml" target="_blank" rel="noopener">2013年10月新版godaddy域名注册图文教程</a>。</p><h3 id="更改域名默认的DNS"><a href="#更改域名默认的DNS" class="headerlink" title="更改域名默认的DNS"></a>更改域名默认的DNS</h3><p>　　在Godaddy上购买的域名默认使用的是国外的DNS来解析的，我们在国内，为了解析速度，需要找一个国内的DNS，大家都选<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a>，<a href="https://www.dnspod.cn/Plans/Buy#personal" target="_blank" rel="noopener">免费版</a>就够用了，具体步骤见图文教程：<a href="http://www.admin5.com/article/20131014/527502.shtml" target="_blank" rel="noopener">2013年10月新版godaddy更改DNS服务器</a>。DNSPod的免费DNS为<code>f1g1ns1.dnspod.net</code>和<code>f1g1ns2.dnspod.net</code>，参见：<a href="https://support.dnspod.cn/Kb/showarticle/?qtype=%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B&amp;tsid=178" target="_blank" rel="noopener">DNSPod各个套餐的DNS地址</a>。全球DNS服务器同步完成最多需要72个小时。如果运气好，也许不到一天，国内就都可以正常访问了。我的运气比较好，不到一小时就可以用了。</p><h3 id="在DNSPod添加域名和记录"><a href="#在DNSPod添加域名和记录" class="headerlink" title="在DNSPod添加域名和记录"></a>在DNSPod添加域名和记录</h3><p>　　具体步骤见图文教程：<a href="https://support.dnspod.cn/Kb/showarticle/tsid/177/" target="_blank" rel="noopener">学会使用DNSPod，仅需三步</a>。<br>　　这里说下“添加记录”，Gitcafe的记录值为：<code>117.79.146.98</code>（参见：<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="noopener">如何创建Page和绑定域名</a>），Github的记录值为：<code>192.30.252.153</code>和<code>192.30.252.154</code>（参见：<a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/" target="_blank" rel="noopener">Tips for configuring an A record with your DNS provider</a>），如下图所示：<img src="http://keke-hexo-blog.qiniudn.com/image/DNSPod添加记录.png" alt></p><h2 id="安装Hexo并初始化博客本地文件夹"><a href="#安装Hexo并初始化博客本地文件夹" class="headerlink" title="安装Hexo并初始化博客本地文件夹"></a>安装Hexo并初始化博客本地文件夹</h2><h3 id="安装分三个步骤："><a href="#安装分三个步骤：" class="headerlink" title="安装分三个步骤："></a>安装分三个步骤：</h3><blockquote><ul><li>安装 Git</li><li>安装 Node.js</li><li>安装 Hexo</li></ul></blockquote><p>参见官方教程：<a href="http://hexo.io/docs/index.html" target="_blank" rel="noopener">点击进入</a></p><h3 id="初始化本地博客文件夹："><a href="#初始化本地博客文件夹：" class="headerlink" title="初始化本地博客文件夹："></a>初始化本地博客文件夹：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt; folder &gt;</span><br><span class="line">$ cd &lt; folder &gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>参见官方教程：<a href="http://hexo.io/docs/setup.html" target="_blank" rel="noopener">点击进入</a></p><h2 id="设置Git以便可以访问Github和Gitcafe"><a href="#设置Git以便可以访问Github和Gitcafe" class="headerlink" title="设置Git以便可以访问Github和Gitcafe"></a>设置Git以便可以访问Github和Gitcafe</h2><p>　　Git会根据用户的名字和邮箱来记录提交。YOUR NAME作为名称凭证，一般用真实姓名；YOUR EMAIL ADDRESS需要与登陆Github（Gitcafe）的邮箱名相同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;YOUR NAME&quot;</span><br><span class="line">$ git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</span><br></pre></td></tr></table></figure></p><p>参见：<a href="https://help.github.com/articles/set-up-git/" target="_blank" rel="noopener">Set Up Git</a></p><h2 id="生成SSH公钥"><a href="#生成SSH公钥" class="headerlink" title="生成SSH公钥"></a>生成SSH公钥</h2><p>　　生成与计算机对应的SSH公钥，用于将Hexo生成的静态本地博客数据远程上传到Github或Gitcafe上。详见Github教程：<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="noopener">Generating SSH keys</a></p><p>　　添加公钥到ssh-agent出错:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa.pub</span><br><span class="line">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure></p><p>　　解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval `ssh-agent`;ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>　　参考：<a href="http://stackoverflow.com/questions/17846529/could-not-open-a-connection-to-your-authentication-agent" target="_blank" rel="noopener">Could not open a connection to your authentication agent</a></p><h2 id="注册Github或Gitcafe、建立pages、绑定域名"><a href="#注册Github或Gitcafe、建立pages、绑定域名" class="headerlink" title="注册Github或Gitcafe、建立pages、绑定域名"></a>注册Github或Gitcafe、建立pages、绑定域名</h2><p>　　该类型的博客是借助Github和Gitcafe的pages功能来将Markdown显示为网页的，而pages功能的出发点用于建立托管项目主页。</p><h3 id="Github设置："><a href="#Github设置：" class="headerlink" title="Github设置："></a>Github设置：</h3><p>详情参考：<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客</a>、<a href="http://beiyuu.com/github-pages/" target="_blank" rel="noopener">使用Github Pages建独立博客</a>、<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">Setting up a custom domain with GitHub Pages</a></p><h3 id="Gitcafe设置："><a href="#Gitcafe设置：" class="headerlink" title="Gitcafe设置："></a>Gitcafe设置：</h3><p>详情参考：<a href="http://zipperary.com/2013/11/23/hexo-to-gitcafe/" target="_blank" rel="noopener">托管博客到gitcafe</a>、<a href="http://magiclin.com/2013/12/20/hexo-gitcafe/" target="_blank" rel="noopener">部署Hexo静态blog到gitcafe</a>，还有Gitcafe官方帮助：<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="noopener">如何创建Page和绑定域名</a></p><h3 id="还有其他一些教程："><a href="#还有其他一些教程：" class="headerlink" title="还有其他一些教程："></a>还有其他一些教程：</h3><p><a href="http://yangjian.me/workspace/building-blog-with-hexo/" target="_blank" rel="noopener">使用hexo搭建博客</a>、<a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a>、<a href="http://www.freehao123.com/gitcafe/" target="_blank" rel="noopener">GitCafe国内在线托管软件项目平台申请试用:附与Github简单比较</a></p><h2 id="同时使用GitHub和GitCafe"><a href="#同时使用GitHub和GitCafe" class="headerlink" title="同时使用GitHub和GitCafe"></a>同时使用GitHub和GitCafe</h2><p>　　配置使得国外访问Github、国内访问Gitcafe。</p><p>　　在DNSPod上的域名解析设置参考：<a href="http://www.tuicool.com/articles/2yiMVjZ" target="_blank" rel="noopener">同时使用 GitHub 和 GitCafe 托管 octopress</a></p><p>　　Hexo参数配置参考：<a href="http://hexo.io/docs/deployment.html#Git" target="_blank" rel="noopener">官方文档</a>，下面是我的部署配置（_config.yml)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">   github: git@github.com:keke2014/keke2014.github.io.git</span><br><span class="line">   gitcafe: git@gitcafe.com:keke2014/keke2014.git,gitcafe-pages</span><br></pre></td></tr></table></figure><h2 id="Github与Gitcafe比较"><a href="#Github与Gitcafe比较" class="headerlink" title="Github与Gitcafe比较"></a>Github与Gitcafe比较</h2><p>　　</p><blockquote><ul><li>Github项目多、大牛多，但是国内访问速度稍逊；Gitcafe国内访问速度很快，域名绑定方便。</li><li>Github单个项目最大空间限制为1GB、单个文件不得大于100MB，而且好像不支持付费购买，等博客内容累计到大于1GB就不好办了，参考：<a href="https://help.github.com/articles/what-is-my-disk-quota/" target="_blank" rel="noopener">What is my disk quota?</a>、<a href="https://github.com/pricing" target="_blank" rel="noopener">Plans and pricing</a>；Gitcafe每个账户免费赠送 512 MB 托管空间，在超出免费使用空间后后，超出部分每 512 MB 每天需支付 4 GitCoin，参见：<a href="https://gitcafe.com/GitCafe/Help/wiki/GitCafe-%E8%B4%A6%E6%88%B7%E6%9D%83%E9%99%90%E4%B8%8E%E6%94%B6%E8%B4%B9%E8%A7%84%E5%88%99#wiki" target="_blank" rel="noopener">GitCafe 账户权限与收费规则</a>。</li></ul></blockquote><h2 id="附件存储"><a href="#附件存储" class="headerlink" title="附件存储"></a>附件存储</h2><p>　　Github和Gitcafe空间有限，较大的附件和图片需要放到其他地方，首选<a href="https://portal.qiniu.com/signup" target="_blank" rel="noopener">七牛云</a>，对于个人博客免费版足够了，而且身份认证后可以升级为标准版（具有更大的空间、更多的流量）。这是我的邀请链接：<a href="https://portal.qiniu.com/signup?code=3llqzksdajln6" target="_blank" rel="noopener">https://portal.qiniu.com/signup?code=3llqzksdajln6</a></p><h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><h3 id="在线的"><a href="#在线的" class="headerlink" title="在线的"></a>在线的</h3><blockquote><ul><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd - 在线 Markdown 编辑阅读器</a></li><li><a href="http://mahua.jser.me/" target="_blank" rel="noopener">MaHua 在线 Markdown 编辑器</a></li><li><a href="http://maxiang.info/" target="_blank" rel="noopener">马克飞象</a></li><li><a href="http://www.jianshu.com/" target="_blank" rel="noopener">简书</a></li></ul></blockquote><h3 id="离线应用程序"><a href="#离线应用程序" class="headerlink" title="离线应用程序"></a>离线应用程序</h3><p>　　我选用的是<a href="https://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a>，<a href="http://www.sum16.com/resource/markdownpad-2-pro-key.html" target="_blank" rel="noopener">MarkdownPad 2 Pro 注册码</a>。初始使用发现代码块显示有问题，设置见：<a href="http://lutaf.com/208.htm" target="_blank" rel="noopener">终于搞定了 markdown编辑器的语法高亮</a></p><p>　　参考：<a href="http://www.jianshu.com/p/dcffb6f60fe2" target="_blank" rel="noopener">Markdown编辑器之比较</a>、<a href="http://www.open-open.com/news/view/1be6464" target="_blank" rel="noopener">实用的 Markdown 编辑器和工具</a>、<a href="http://www.zhihu.com/question/19637157" target="_blank" rel="noopener">用 Markdown 写作用什么文本编辑器？</a></p><h2 id="个人的一些配置（写给没搞过前端的人）"><a href="#个人的一些配置（写给没搞过前端的人）" class="headerlink" title="个人的一些配置（写给没搞过前端的人）"></a>个人的一些配置（写给没搞过前端的人）</h2><h3 id="安装Jacman主题："><a href="#安装Jacman主题：" class="headerlink" title="安装Jacman主题："></a>安装Jacman主题：</h3><p>请参考：<a href="https://github.com/wuchong/jacman" target="_blank" rel="noopener">https://github.com/wuchong/jacman</a></p><p> <strong>以下说明基于Jacman主题(详情参考该主题的配置说明：<a href="https://github.com/wuchong/jacman/wiki/How-To-Use-Jacman-(%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">点击</a>)</strong></p><h3 id="添加“关于”（用于介绍自己和博客）"><a href="#添加“关于”（用于介绍自己和博客）" class="headerlink" title="添加“关于”（用于介绍自己和博客）"></a>添加“关于”（用于介绍自己和博客）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>在hexo\source\下会生成about目录，里面有个index.md，直接编辑就可以了。</p><h3 id="启用标签和分类"><a href="#启用标签和分类" class="headerlink" title="启用标签和分类"></a>启用标签和分类</h3><p>menu 默认没有启用 /tags 和 /categories 页面，如果需要启用请在博客目录下的source文件夹中分别建立tags 和 categories文件夹每个文件夹中分别包含一个index.md文件。内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout: tags (或categories)</span><br><span class="line">title: tags (或categories)</span><br></pre></td></tr></table></figure></p><p>因为主题中已经内置了这两个页面的模板，所以他们会被正确的解析出来。<br>在博文布局scaffolds\post.md（hexo new 默认使用该布局）里添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">tags:</span><br></pre></td></tr></table></figure></p><p>生成博文之后，就可以在博文里添加分类和标签了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories: 经验教程</span><br><span class="line">tags: [博客搭建, Hexo, Github, Gitcafe]</span><br></pre></td></tr></table></figure></p><h3 id="添加微博挂件"><a href="#添加微博挂件" class="headerlink" title="添加微博挂件"></a>添加微博挂件</h3><p>到<a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="noopener">这里</a>生成微博秀改名，然后替换jacman\layout_widget\weibo.ejs中的相应代码。</p><h3 id="博客主页下面的作者图片、介绍、微博、Email"><a href="#博客主页下面的作者图片、介绍、微博、Email" class="headerlink" title="博客主页下面的作者图片、介绍、微博、Email"></a>博客主页下面的作者图片、介绍、微博、Email</h3><p>图片直接替换themes\jacman\source\img中的author.jpg。<br>介绍在主题配置文件themes\jacman_config.yml中修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#### Author information</span><br><span class="line">author:</span><br><span class="line">  intro_line1:  &quot;Hello, I&apos;m Juke Zhang.&quot;  ## eg: &quot;Hello ,I&apos;m Larry Page in Google.&quot;</span><br><span class="line">  intro_line2:  &quot;This is my blog.&quot;  ## eg: &quot;This is my blog,believe it or not.&quot;</span><br><span class="line">  weibo: keke2014 ## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895，注意，只需要填微博名，而不是完整的网址</span><br><span class="line">  ---</span><br><span class="line">  email: zhangjuke@qq.com ## e.g. wuchong1014@gmail.com</span><br></pre></td></tr></table></figure></p><h3 id="主题上面淡蓝色留白高度调节"><a href="#主题上面淡蓝色留白高度调节" class="headerlink" title="主题上面淡蓝色留白高度调节"></a>主题上面淡蓝色留白高度调节</h3><p>themes\jacman\source\css_partial\header.styl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header nav</span><br><span class="line">  ---</span><br><span class="line">    margin-top 0.1em</span><br></pre></td></tr></table></figure></p><h3 id="添加多说评论"><a href="#添加多说评论" class="headerlink" title="添加多说评论"></a>添加多说评论</h3><p>注册<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说</a>，将设置的后台管理网址的用户名添加到主题配置文件themes\jacman_config.yml中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#### Comment</span><br><span class="line">duoshuo: </span><br><span class="line">  enable: true  ## duoshuo.com</span><br><span class="line">  short_name: jukezhang   ##e.g. wuchong   for duoshuo short name.</span><br></pre></td></tr></table></figure></p><p>如果想自定义多说评论显示，请参考：<a href="http://blog.csdn.net/jelope/article/details/19678633" target="_blank" rel="noopener">为Hexo添加多说评论功能(正文评论和列表评论数)</a></p><h3 id="右侧友情链接"><a href="#右侧友情链接" class="headerlink" title="右侧友情链接"></a>右侧友情链接</h3><p>在 themes\jacman\layout_widget\links.ejs 中添加。</p><h3 id="添加RSS和Sitemap"><a href="#添加RSS和Sitemap" class="headerlink" title="添加RSS和Sitemap"></a>添加RSS和Sitemap</h3><p>Jacman主题已经配置好，只需要安装在hexo的配置文件中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">  - hexo-generator-feed</span><br><span class="line">  - hexo-generator-sitemap</span><br></pre></td></tr></table></figure></p><p>并利用node.js在本地安装这两个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br><span class="line">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure></p><p>参考：<a href="http://zipperary.com/2013/06/02/hexo-guide-5/" target="_blank" rel="noopener">hexo系列教程：（五）hexo博客的优化技巧续</a></p><h3 id="Markdown图片居中"><a href="#Markdown图片居中" class="headerlink" title="Markdown图片居中"></a>Markdown图片居中</h3><p>在图片文本之前添加一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;text-align:center&quot; markdown=&quot;1&quot;&gt;</span><br><span class="line">![image description](image url)</span><br></pre></td></tr></table></figure></p><p>参考：<a href="http://trefoil.github.io/2013/10/23/cssmarkdown.html" target="_blank" rel="noopener">使用css让markdown生成的网页里图片居中</a></p><h3 id="Markdown在文本之前输入空格（段落缩进）"><a href="#Markdown在文本之前输入空格（段落缩进）" class="headerlink" title="Markdown在文本之前输入空格（段落缩进）"></a>Markdown在文本之前输入空格（段落缩进）</h3><p>将输入法切换到全角模式(shift+space)输入即可，或者使用代码：</p><blockquote><p>半方大的空白<code>&amp;ensp</code>;或<code>&amp;#8194</code>;<br>全方大的空白<code>&amp;emsp</code>;或<code>&amp;#8195</code>;<br>不断行的空白格<code>&amp;nbsp</code>;或<code>&amp;#160</code>;</p></blockquote><p>参考：<a href="http://www.zhihu.com/question/21420126" target="_blank" rel="noopener">在 Markdown 语言中，如何实现段首空格的显示 ？</a></p><h3 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h3><blockquote><ul><li>初始化新的Hexo项目: <code>hexo init</code></li><li>创建一篇新文章: <code>hexo new article_name</code></li><li>构建静态文件: <code>hexo generate</code>，简写为<code>hexo g</code></li><li>开启本地server进行预览:<code>hexo server</code>， 简写为<code>hexo s</code>。 执行后可以访问<code>localhost:4000</code>进行效果预览。</li><li>部署到远程服务器: <code>hexo depoly</code>，简写为<code>hexo d</code></li><li>也可把 <code>hexo g</code> 和 <code>hexo d</code> 合起来： <code>hexo d -g</code></li></ul></blockquote><h2 id="Markdown参考"><a href="#Markdown参考" class="headerlink" title="Markdown参考"></a>Markdown参考</h2><p><a href="https://gitcafe.com/GitCafe/Help/wiki/Markdown-%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E8%A1%A8#wiki" target="_blank" rel="noopener">Markdown 语法速查表</a><br><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="noopener">Markdown Basics</a><br><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">Mastering Markdown</a><br><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a><br><a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图</a><br><a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图</a><br><a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">图标</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Gitcafe </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
